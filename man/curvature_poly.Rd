% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/curvature_poly.R
\name{curvature_poly}
\alias{curvature_poly}
\title{Calculate total curvature from polynomial functions
fitted to landmarked specimens.}
\usage{
curvature_poly(Momocs_poly, x_range, subdiv = 1000, param = FALSE)
}
\arguments{
\item{Momocs_poly}{a polynomial \code{list} object
generated by \code{Momocs:::npoly.default()} or
\code{Momocs:::opoly.default()}. This function cannot yet
handle \code{OpnCoe} objects created by e.g. \code{Momocs:::npoly.Opn()}.}

\item{x_range}{the lower and upper x-value bounds to
calculate curvature. These are named 'baselines'
in \code{Momocs} polynomial objects.}

\item{subdiv}{number of subdivisions made
within \code{x_range}. Curvature is calculated at every
subdivision and summed to compute total curvature.
Default is 1000. The same number of subdivisions will be
applied to all curves, regardless of arclength.}

\item{param}{whether to parameterize the curve by arc length
(see\code{pracma::arclength}). Setting \code{param=TRUE} greatly
increases computing time.}
}
\value{
a numeric representing total curvature. Units are radians.
}
\description{
Calculates total
curvature along bounded polynomials fitted to curved
specimens. Polynomials are fitted to landmarked
specimens using package \code{Momocs}.
}
\examples{

library(Momocs)

x <- 1:10
y <- x^2

# a fictional landmark dataset
mdat <- matrix(c(x,y), nrow=10, ncol=2)

# fit second-order polynomial to landmarks
my_poly <- Momocs::npoly(mdat, 2)

# extract x bounds from Momocs polynomial object
x_range <- c(my_poly$baseline1[[1]], my_poly$baseline2[[1]])

# compute point-wise curvature 100 times
curvature_poly(my_poly, x_range, 100)
}
