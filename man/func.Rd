% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/function_formatting.R
\name{func}
\alias{func}
\title{Convert polynomial objects from Momocs into a function}
\usage{
func(poly)
}
\arguments{
\item{poly}{An OpnCoe object generated by \code{Momocs::npoly()} or \code{Momocs::opoly()}.}
}
\value{
a polynomial function (e.g. y = x^2) of the form \code{function(x) {x^2}}.
}
\description{
Convert polynomial objects from Momocs into a function
 readable by ...
}
\examples{

library(Momocs)

x <- 1:10
y <- x^2

#a fictional landmark dataset
mdat <- matrix(c(x,y), nrow=10, ncol=2)

my_poly <- Momocs::npoly(mdat, 2)


#solve for y values for arc-length parameterized curve

library(Momocs)

x <- 1:10
y <- x^2

# a fictional landmark dataset
mdat <- matrix(c(x,y), nrow=10, ncol=2)

my_poly <- Momocs::npoly(mdat, 2)

param_poly <- param(my_poly)

subdiv <- 100 # number of times to subdivide the curve
iter <- seq(0, 1, by=1/subdiv)
arcfun_list<- list() # empty bin

# arc length of t-parameterized function between x = [0, 1]
x_range <- c(0,1)
b <- pracma::arclength(param_poly, x_range[1], x_range[2])$length

# for every fraction of arclength, b*i, create a function(u) with an unknown
# x-coordinate, u. Solve for u by uniroot().
for(i in seq_along(iter)){
   arcfun_list[[i]] <-
       local({
           b_sub<-iter[i]*b
           function(u) pracma::arclength(param_poly, x_range[1], u)$length - b_sub
       })
}
#root-finding function
root_find <- function(x) uniroot(x, x_range)$root
# parameterize polynomial function by arc length
x <- sapply(arcfun_list, root_find)

# solve for corresponding y-values
func_poly <- func(my_poly)

y <- func_poly(x)

}
\seealso{
\code{\link{express}} for converting Momocs polynomials to expressions
}
