% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/function_formatting.R
\name{as_function}
\alias{as_function}
\title{Convert polynomial objects from \code{Momocs} into a function}
\usage{
as_function(poly)
}
\arguments{
\item{poly}{A \code{list} object generated by \code{Momocs::npoly()} or
\code{Momocs::opoly()}. This function does not currently support \code{OpnCoe} objects.}
}
\value{
a polynomial function (eg y = x^2) of the form \code{function(x) {x^2}}.
}
\description{
Convert polynomial objects from \code{Momocs} into a function.
Allows the calculation of y-coordinates from polynomials.
}
\examples{

# solve for y values for arc-length parameterized curve

library(Momocs)

x <- 1:10
y <- x^2

# a fictional landmark dataset
mdat <- matrix(c(x, y), nrow = 10, ncol = 2)

# fit a second-order polynomial to landmarks
my_poly <- Momocs::npoly(mdat, 2)

paramd_poly <- parameterize(my_poly)

subdiv <- 100 # number of times to subdivide the curve
iter <- seq(0, 1, by = 1 / subdiv)
arcfun_list <- list() # empty bin

# arc length of t-parameterized function between x = [0, 1]
x_range <- c(0, 1)
b <- pracma::arclength(paramd_poly, x_range[1], x_range[2])$length

# for every fraction of arclength, b*i, create a function(u) with an unknown
# x-coordinate, u. Solve for u by uniroot().
for (i in seq_along(iter)) {
  arcfun_list[[i]] <-
    local({
      b_sub <- iter[i] * b
      function(u) pracma::arclength(paramd_poly, x_range[1], u)$length - b_sub
    })
}

# root-finding function
root_find <- function(x) uniroot(x, x_range)$root

# parameterize polynomial function by arc length
x <- sapply(arcfun_list, root_find)

# solve for corresponding y-values
func_poly <- as_function(my_poly)

y <- func_poly(x)
}
\seealso{
\code{\link{as_expression}} for converting Momocs polynomials to expressions
}
